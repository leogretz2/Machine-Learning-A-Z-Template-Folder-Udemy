setwd("~/Machine Learning A-Z Template Folder Udemy/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)/Artificial_Neural_Networks")
setwd("~/Machine Learning A-Z Template Folder Udemy/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)/Artificial_Neural_Networks")
dataset = read.csv('Churn_Modelling.csv')
View(dataset)
View(dataset)
dataset = dataset[, 4:14]
View(dataset)
dataset$Geography = factor(dataset$Geography, levels = c('France', 'Spain', 'Germany'), labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender, levels = c('No', 'Yes'), labels = c(1, 2))
View(dataset)
dataset$Gender = factor(dataset$Gender, levels = c('Female', 'Male'), labels = c(1, 2))
dataset$Gender = factor(dataset$Gender, levels = c('Female', 'Male'), labels = c(1, 2))
View(dataset)
dataset$Geography = as.numeric(factor(dataset$Geography, levels = c('France', 'Spain', 'Germany'), labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender, levels = c('Female', 'Male'), labels = c(1, 2)))
View(dataset)
dataset = read.csv('Churn_Modelling.csv')
View(dataset)
dataset = dataset[, 4:14]
View(dataset)
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
View(dataset)
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[11] = scale(training_set[11])
test_set[11] = scale(test_set[11])
View(test_set)
View(training_set)
# Feature Scaling
training_set[11] = scale(training_set[11])
test_set[11] = scale(test_set[11])
View(training_set)
View(test_set)
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
View(test_set)
View(training_set)
View(training_set)
install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited', training_frame = .ash2o(training_set), activation = 'Rectifier', hidden = c(6,6), epochs = 100, training_samples_per_iteration = -2)
classifier = h2o.deeplearning(y = 'Exited', training_frame = as.h2o(training_set), activation = 'Rectifier', hidden = c(6,6), epochs = 100, training_samples_per_iteration = -2)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited', training_frame = as.h2o(training_set), activation = 'Rectifier', hidden = c(6,6), epochs = 100, training_samples_per_iteration = -2)
classifier = h2o.deeplearning(y = 'Exited', training_frame = as.h2o(training_set), activation = 'Rectifier', hidden = c(6,6), epochs = 100)
