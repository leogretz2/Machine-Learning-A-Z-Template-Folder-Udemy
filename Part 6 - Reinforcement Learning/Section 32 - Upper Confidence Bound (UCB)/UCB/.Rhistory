setwd("~/Machine Learning A-Z Template Folder Udemy/Part 4 - Clustering/Section 24 - K-Means Clustering/K_Means")
dataset = read.csv('Mall-Customers.csv')
dataset = read.csv('Mall_Customers.csv')
X = dataset[, 4:5]
View(dataset)
View(X)
X = dataset[, 4:6]
X = dataset[, 4:5]
dataset = read.csv('Mall_Customers.csv')
X = dataset[, 4:5]
# Using the Elbow Method to find the optimal number of clusters
set.seed(6)
wcss <- vector()
for (i in 1:10) sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = 'b', main = poster('Clusters of Clients'), xlab = 'Number of Clusters', ylab = 'WCSS')
dataset = read.csv('Mall_Customers.csv')
X = dataset[, 4:5]
# Using the Elbow Method to find the optimal number of clusters
set.seed(6)
wcss <- vector()
for (i in 1:10) sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Clusters of Clients'), xlab = 'Number of Clusters', ylab = 'WCSS')
dataset = read.csv('Mall_Customers.csv')
X = dataset[, 4:5]
# Using the Elbow Method to find the optimal number of clusters
set.seed(6)
wcss <- vector()
for (i in 1:10) wcss[i] sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Clusters of Clients'), xlab = 'Number of Clusters', ylab = 'WCSS')
dataset = read.csv('Mall_Customers.csv')
X = dataset[4:5]
# Using the Elbow Method to find the optimal number of clusters
set.seed(6)
wcss <- vector()
for (i in 1:10) wcss[i] sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Clusters of Clients'), xlab = 'Number of Clusters', ylab = 'WCSS')
dataset = read.csv('Mall_Customers.csv')
X = dataset[4:5]
# Using the Elbow Method to find the optimal number of clusters
set.seed(6)
wcss <- vector()
for (i in 1:10) wcss[i] <- sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Clusters of Clients'), xlab = 'Number of Clusters', ylab = 'WCSS')
set.seed(29)
kmeans <- kmeans(X, 5, iter.max = 300, nstart = 10)
set.seed(29)
kmeans <- kmeans(X, 5, iter.max = 300, nstart = 10)
#Visualizing the clusters
library(cluster)
clusplot(X, kmeans$cluster, lines = 0, shade = TRUE, color = TRUE, labels = 2, span = TRUE, main = paste('Clusters of Clients'), xlab = 'Annual Income', ylab = 'WCSS')
clusplot(X, kmeans$cluster, lines = 0, shade = TRUE, color = TRUE, labels = 2, span = TRUE, main = paste('Clusters of Clients'), xlab = 'Annual Income', ylab = 'WCSS')
# Importing the dataset
dataset = read.csv('Mall_Customers.csv')
X = dataset[4:5]
# Using the Elbow Method to find the optimal number of clusters
set.seed(6)
wcss <- vector()
for (i in 1:10) wcss[i] <- sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Clusters of Clients'), xlab = 'Number of Clusters', ylab = 'WCSS')
# Applying k-means to the mall daataset
set.seed(29)
kmeans <- kmeans(X, 5, iter.max = 300, nstart = 10)
#Visualizing the clusters
library(cluster)
clusplot(X, kmeans$cluster, lines = 0, shade = TRUE, color = TRUE, labels = 2, span = TRUE, main = paste('Clusters of Clients'), xlab = 'Annual Income', ylab = 'WCSS')
setwd("~/Machine Learning A-Z Template Folder Udemy/Part 4 - Clustering/Section 25 - Hierarchical Clustering/Hierarchical_Clustering")
dataset = read.csv('Mall_Customers.csv')
View(dataset)
X = dataset[, 4:5]
View(X)
dendrogram = hclust(dist(X, method = 'euclidean'), method = 'ward.D')
plot(dendrogram, main = paste('Dendrogram'), xlab = 'Customers', ylab = 'Euclidean Distances')
hc = hclust(dist(X, method = 'euclidean'), method = 'ward.D')
y_hc = cutree(hc, 5)
y_hc
hc = hclust(dist(X, method = 'euclidean'), method = 'ward.D')
y_hc = cutree(tree = hc, k = 5)
y_hc
library(cluster)
clusplot(X, y_kmeans$cluster, lines = 0, shade = TRUE, color = TRUE, labels = 2, span = TRUE, main = paste('Clusters of Clients'), xlab = 'Annual Income', ylab = 'WCSS')
#Visualizing the clusters
library(cluster)
clusplot(X, y_hc, lines = 0, shade = TRUE, color = TRUE, labels = 2, span = TRUE, main = paste('Clusters of Clients'), xlab = 'Annual Income', ylab = 'WCSS')
setwd("~/Machine Learning A-Z Template Folder Udemy/Part 5 - Association Rule Learning/Section 28 - Apriori/Apriori")
dataset = read.csv('Market_Basket_Optimisation.csv')
View(dataset)
# Data Processing
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
install.packages('arules')
library(arules)
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 100)
itemFrequencyPlot(dataset, topN = 10)
3*7/7500
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.8))
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.4))
inspect(sort(rules, by = 'lift')[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.2))
# Visualizing the Results
inspect(sort(rules, by = 'lift')[1:10])
28/7500
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2))
# Visualizing the Results
inspect(sort(rules, by = 'lift')[1:10])
setwd("~/Machine Learning A-Z Template Folder Udemy/Part 5 - Association Rule Learning/Section 29 - Eclat/Eclat")
library(arules)
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
(dataset)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
rules = eclat(data = dataset, parameter = list(support = 0.004, minlen = 2))
inspect(sort(rules, by = 'support')[1:10])
setwd("~/Machine Learning A-Z Template Folder Udemy/Part 6 - Reinforcement Learning/Section 32 - Upper Confidence Bound (UCB)/UCB")
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
