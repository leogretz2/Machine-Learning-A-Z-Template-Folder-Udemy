setwd("~/Machine Learning A-Z Template Folder Udemy/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)/Artificial_Neural_Networks")
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
library(h2o)
library("h2o", lib.loc="~/R/win-library/3.5")
detach("package:h2o", unload=TRUE)
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited', training_frame = as.h2o(training_set), activation = 'Rectifier', hidden = c(6,6), epochs = 100)
detach("package:h2o", unload=TRUE)
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited', training_frame = as.h2o(training_set), activation = 'Rectifier', hidden = c(6,6), epochs = 100)
detach("package:h2o", unload=TRUE)
h2o.init(nthreads = -1)
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited', training_frame = as.h2o(training_set), activation = 'Rectifier', hidden = c(6,6), epochs = 100, train_samples_per_iteration = -2)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited', training_frame = as.h2o(training_set), activation = 'Rectifier', hidden = c(6,6), epochs = 100, train_samples_per_iteration = -2)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
cm = table(test_set[, 11], y_pred)
cm
(1539+188)/2000
h2o.shutdown()
setwd("~/Machine Learning A-Z Template Folder Udemy/Part 9 - Dimensionality Reduction/Section 43 - Principal Component Analysis (PCA)/PCA")
dataset = read.csv('Wine.csv')
View(dataset)
View(dataset)
dataset = dataset[1:13]
dataset = read.csv('Wine.csv')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[, 1:13] = scale(training_set[, 1:13])
test_set[, 1:13] = scale(test_set[, 1:13])
View(training_set)
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
View(training_set)
install.packages('caret')
library(caret)
library(e1071)
pca = preProcess(X= training_set[-14], method = 'pca', pcaComp = 2)
pca = preProcess(x = training_set[-14], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
View(training_set)
training_set = training_set[c(2,3,1)]
View(training_set)
test_set = predict(pca, test_set)
test_set = test_set[c(2,3,1)]
View(test_set)
library(e1071)
classifier = svm(formula = Customer_Segment ~ ., data = training_set, type = 'C-classification', kernel = 'linear')
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepbluesky', ifelse(y_grid ==1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3], main = 'SVM (Test set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepbluesky', ifelse(y_grid ==1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
setwd("~/Machine Learning A-Z Template Folder Udemy/Part 9 - Dimensionality Reduction/Section 44 - Linear Discriminant Analysis (LDA)/LDA")
library(MASS)
# LDA
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
training_set = predict(lda, training_set)
View(training_set)
library(MASS)
lda = lda(formula = Customer_Segment ~ ., dataset = training_set)
training_set = predict(lda, training_set)
# LDA
# Importing the dataset
dataset = read.csv('Wine.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
library(MASS)
lda = lda(formula = Customer_Segment ~ ., dataset = training_set)
training_set = predict(lda, training_set)
View(dataset)
View(test_set)
View(training_set)
